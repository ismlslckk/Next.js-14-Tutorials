#Server Components 
  * In next js , all components are server components
  * server components don't have the ability to use hooks or handle user interactions to create a client

#Client Components 
  * To create a client component it is necessary to add "use client" at the top of the component file
  * Unlike server components client components can't perform tasks like reading files but they have the ability to use Hooks and manage interactions

#Routing
 * Next js has a file system based routing mechanism where the URL
 * The URL paths accessible in the browser are defined by files and folders within your code base

#Routing Conventions
 * All routes must be placed inside the app folder 
 * Every file that represents a route should be named page.js or page.tsx
 * every page.tsx should definen as export default component_name 
 * Every folder corresponds to a part segment in the browser URL

#Nested Routes
 * routes follow nested routes with the same convention through folder name

#Dynamic Routes
 * products / [productId] / page.tsx : localhost:3000/6 , we can catch productId from the searchParams in page.tsx

#Nested Dynamic Routes
 * products / [productId] / reviewws / [reviewId] / page.tsx : localhost:3000/6/ , 
   we can catch productId and reviewId from the searchParams in review page.tsx

#Catch all Segments
 * docs/[...slug]/page.tsx : this will match page.tsx for below urls;
     - localhost:3000/docs/feature1
     - localhost:3000/docs/feature1/example1
     - localhost:3000/docs/feature1/example1/detail1
     - localhost:3000/docs/feature1/example1/detail1/.............

 * slug:string[] will pass into searchParams from next.js 
 * we'll see an exception if visit localhost:3000/docs url , to be able to also render same page.tsx we need to replace double square brackets such as docs/[[...slug]]/page.tsx


#Not Found Page
 * next js will redirect the user to 404 page automatically if the url does not match and folder path, we can create not-found.tsx file to 
   render specific content
 * not-found.tsx can take place under every single folder. 

#Private Folders
 * A private folder indicates that it is a private implementation detail and should not be considered by the routing system 
 * The folder and all its subfolders are excluded from routing
 * To create a private folder you simply prefix the folder name with an underscore
 * i.e _lib, _utilities ...
 * Separating UI logic from routing Logic
 * Consistently organizing internal files across a project 
 * Sorting and grouping files in code editors
 * If you want to include an underscore in url segments you can prefix the folder name with "%5F" which is the URL encoded form of an underscore

#Route Groups
 * (folder_name) convention allows us to exclude path from the router.
 * we can access below definitions pages without auth path.
 * (auth) / login,register,forgot-password

#Layouts
 * Every folder can have a layout, next js applies the layouts from bottom to top.
 * layout should define as layout.tsx and should exported as default.

#Routing Metadata
 * metadata can defined every page.tsx file with the exact name "metadata" exported variable.
      #Configure Metadata
        * export a static metadata object 
        * export a dynamic generate metadata function
      #Metadata Rules
        * Both layout.tsx and page.tsx files can export metadata. if defined in layout it applies to all pages in that layout but if    
          defined in a page it applies only to that page metadata 
* Metadata is read in order from the root level down to the final page level
* When there is metadata in multiple places for the same route they get combined but page metadata will replace layout metadata if they have 
    the same propertie


#Title Metadata
 * title metadata can defined as an object which consists absolute,default,template fields.
 * if default field defined in layout.tsx , it is automatically applies all the pages underneath itself. so we can use default field as title
   for all pages if pages don't have a itselft title.
 * if template field defined in layout.tsx, it is automatically applies all the pages underneath itself.
   i.e template="%s | World" is an layout.tsx title and title="New" is an page.tsx title , "New World" would be final title in page.tsx.
   template override default field.
 * if absolute defined in page.tsx as title , this will override layout.tsx metadata and would be final title.


#Link
 * replace keywords clear the route history.


#Templates
 * Note : Layouts don't remount shared components resulting in the performance 
 * Templates are similar to layouts in that they wrap each child layout or page
 * But with templates when a user navigates between routes that share a template a new instance of the component is mounted Dom elements   
     are recreated state is not preserved and effects are resynchronized
 * it should defined exact name "template.tsx"
 * Template and layout can used at the same time , in this case next js renders through layout => template => page 


#Loading
 * it should defined exact name "loading.tsx"
 * nextjs allows the creation of shared layouts that remain interactive while new route segments are loading this means that users can continue
 * it can define for every route folder

#Error Handling
 * it can define for every route folder
 * this should render client side
 * error bubble up to the root level as long as there is no error.tsx for each level of routing
 * error.tsx can't catch the error if the error occur in layout.tsx, so we need to move error.tsx one more level up route 

#Recover Error Handling
 * nextjs pass reset function into props of error component to be able to re-render the page 


#Parallel Routes
 * Parallel routes are an advanced routing mechanism that allows for the simultaneous rendering of multiple Pages within the same layout
 * Parallel routes in nextjs are defined using a feature known as slots
 * To define a slot we use the @ folder naming convention
 * folder name should begin with @ convention
 * Each slot is then automatically passed as a prop to its corresponding layout.tsx
 * we can't navigate slot path , it can only available within layout.tsx

    #benefits
      * A clear benefit of parallel benefits routes is their ability to split a single layout into various slots making
         the code more manageable
      * Each route independently this means that each slot of your layout such as user analytics or Revenue metrics can have
         its own loading and error States this
      * Each slot of your dashboard can essentially function as a mini application complete with its own
         navigation and State Management

    #Unmatched Routes
      * In the case of navigation within the UI nextjs retains the previously active state of a slot regardless of changes in the URL ,
        it means that other slots not effected by other slot's actions.
      * In the case of a page reload next sh immediately searches for a default.tsx file within each unmatched slot
      * If this default.tsx file is missing in any of the unmatched slots for the current route next JS will render a 404 error
      * The default.tsx file in the nextjs serves as a fall back to render content when the framework cannot retrieve a slot's active state           from the current URL 
      * We can mirror the same component within the default.tsx or make a custom view.


#Intercepting Routes
 * it still redirect us to clicked route as usual but it renders an intercepted component till the user refresh the page.
 * it can be usefull in the scenario where we want to show a content in a modal.
     #conventions
       * (.)product       => it is match with the same level route.
       * (..)product      => it is match with the one level above route.
       * (..)(..)product  => it is match with the two level above route.
       * (...) product    => it is match from the root app directory level route.


#Route Handlers
 * It should define exact name "route.ts"
 * For get http request function should be "export async function GET() {}" and also should be same convention.
 * It renders route.ts if the route has both page.tsx and route.tx , to avoid this issue we can move the the file into api folder 

#Caching In Route Handlers
 * Route handlers are cached by caching behavior default when using the get method with a response object in nextjs
 * this behavior only happens with builded version, it doesn't happen with development mode.
     #Scenarios which disable cache by default
       * To disable caching in nextjs we need to set below variable top of the route
           export const dynamic = "force-dynamic";  this is set "auto" as default
       * Using the request object with the get method
       * Using Dynamic functions like headers() and cookies()
       * Using any HTTP method other than get method
       * set options for fetch method with cache:"no-store"


#Middleware
 * it should take place with the same level src folder and named as "middleware.ts"
 * It does this at a global level significantly enhancing features like redirection URL rewrites authentication headers and cookies
     management and more
 * Note : using rewrite instead of redirect allow us to use route path but render another route.











#NOTES
#1
    * To disable SSR for a specific component we can use below code snippet;
   const DynamicComponent = dynamic(() => import('../components/YourComponent'), ssr: false});
    * Or wrap with a div and add suppresshydrationwarning prop into div props.

#2
   * If we wrap a SSC component with a CSC component , it still will render as a SSC











