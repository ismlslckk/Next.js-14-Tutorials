#Server Components 
  * In next js , all components are server components
  * server components don't have the ability to use hooks or handle user interactions to create a client

#Client Components 
  * To create a client component it is necessary to add "use client" at the top of the component file
  * Unlike server components client components can't perform tasks like reading files but they have the ability to use Hooks and manage interactions

#Routing
 * Next js has a file system based routing mechanism where the URL
 * The URL paths accessible in the browser are defined by files and folders within your code base

#Routing Conventions
 * All routes must be placed inside the app folder 
 * Every file that represents a route should be named page.js or page.tsx
 * every page.tsx should definen as export default component_name 
 * Every folder corresponds to a part segment in the browser URL

#Nested Routes
 * routes follow nested routes with the same convention through folder name

#Dynamic Routes
 * products / [productId] / page.tsx : localhost:3000/6 , we can catch productId from the searchParams in page.tsx

#Nested Dynamic Routes
 * products / [productId] / reviewws / [reviewId] / page.tsx : localhost:3000/6/ , 
   we can catch productId and reviewId from the searchParams in review page.tsx

#Catch all Segments
 * docs/[...slug]/page.tsx : this will match page.tsx for below urls;
     - localhost:3000/docs/feature1
     - localhost:3000/docs/feature1/example1
     - localhost:3000/docs/feature1/example1/detail1
     - localhost:3000/docs/feature1/example1/detail1/.............

 * slug:string[] will pass into searchParams from next.js 
 * we'll see an exception if visit localhost:3000/docs url , to be able to also render same page.tsx we need to replace double square brackets such as docs/[[...slug]]/page.tsx


#Not Found Page
 * next js will redirect the user to 404 page automatically if the url does not match and folder path, we can create not-found.tsx file to 
   render specific content
 * not-found.tsx can take place under every single folder. 

#Private Folders
 * A private folder indicates that it is a private implementation detail and should not be considered by the routing system 
 * The folder and all its subfolders are excluded from routing
 * To create a private folder you simply prefix the folder name with an underscore
 * i.e _lib, _utilities ...
 * Separating UI logic from routing Logic
 * Consistently organizing internal files across a project 
 * Sorting and grouping files in code editors
 * If you want to include an underscore in url segments you can prefix the folder name with "%5F" which is the URL encoded form of an underscore

#Route Groups
 * (folder_name) convention allows us to exclude path from the router.
 * we can access below definitions pages without auth path.
 * (auth) / login,register,forgot-password

#Layouts
 * Every folder can have a layout, next js applies the layouts from bottom to top.
 * layout should define as layout.tsx and should exported as default.

#Routing Metadata
 * metadata can defined every page.tsx file with the exact name "metadata" exported variable.
      #Configure Metadata
        * export a static metadata object 
        * export a dynamic generate metadata function
      #Metadata Rules
        * Both layout.tsx and page.tsx files can export metadata. if defined in layout it applies to all pages in that layout but if    
          defined in a page it applies only to that page metadata 
* Metadata is read in order from the root level down to the final page level
* When there is metadata in multiple places for the same route they get combined but page metadata will replace layout metadata if they have 
    the same propertie


#Title Metadata
 * title metadata can defined as an object which consists absolute,default,template fields.
 * if default field defined in layout.tsx , it is automatically applies all the pages underneath itself. so we can use default field as title
   for all pages if pages don't have a itselft title.
 * if template field defined in layout.tsx, it is automatically applies all the pages underneath itself.
   i.e template="%s | World" is an layout.tsx title and title="New" is an page.tsx title , "New World" would be final title in page.tsx.
   template override default field.
 * if absolute defined in page.tsx as title , this will override layout.tsx metadata and would be final title.


#Link
 * replace keywords clear the route history.


#Templates
 * Note : Layouts don't remount shared components resulting in the performance 
 * Templates are similar to layouts in that they wrap each child layout or page
 * But with templates when a user navigates between routes that share a template a new instance of the component is mounted Dom elements   
     are recreated state is not preserved and effects are resynchronized
 * it should defined exact name "template.tsx"
 * Template and layout can used at the same time , in this case next js renders through layout => template => page 


#Loading
 * it should defined exact name "loading.tsx"
 * nextjs allows the creation of shared layouts that remain interactive while new route segments are loading this means that users can continue

#Error Handling
 * 









